# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  name: String
  email: String
  streakDate: String
  streakCount: String
  google_access_token: String
  google_refresh_token: String
  expo_token: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type Goal @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  title: String!
  content: String
  recurring: String
}

type Client @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  firstName: String!
    @index(name: "byFirstName", queryField: "clientByFirstName")
  lastName: String
  company: String
  phone: String
  email: String
  notes: String
  favorite: Boolean @default(value: "false")
  clientStreet: String
  clientCity: String
  clientState: String
  clientZip: String
  connectionHistory: [ConnectionHistory]
    @hasMany(indexName: "byConnectionHistory", fields: ["id"])
  properties: [Property] @hasMany(indexName: "byProperty", fields: ["id"])
  tasks: [Task] @hasMany(indexName: "byClient", fields: ["id"])
  group: [ClientGroup] @manyToMany(relationName: "GroupsClients")
  reminder: [Reminder] @hasMany(indexName: "byReminder", fields: ["id"])
  deal: [Deal] @hasMany(indexName: "byDeal")
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type Property @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  street: String!
  city: String
  state: String
  zip: String
  price: String
  note: String
  tasks: [Task] @hasMany(indexName: "byProperty", fields: ["id"])
  group: [PropertyGroup] @manyToMany(relationName: "GroupsProperty")
  clientId: ID @index(name: "byProperty")
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type PropertyGroup @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  title: String!
  description: String
  properties: [Property] @manyToMany(relationName: "GroupsProperty")
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type Reminder @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  date: String!
  recurring: Boolean @default(value: "false")
  recurDate: String
  notificationId: String
  clientId: ID! @index(name: "byReminder")
  client: Client @belongsTo(fields: ["clientId"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type ClientGroup @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  title: String!
  clients: [Client] @manyToMany(relationName: "GroupsClients")
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type ConnectionHistory @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  title: String!
  content: String
  date: String
  clientId: ID! @index(name: "byConnectionHistory", sortKeyFields: ["title"])
  client: Client @belongsTo(fields: ["clientId"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type Task @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  clientId: ID @index(name: "byClient", sortKeyFields: ["title"])
  propertyId: ID @index(name: "byProperty")
  title: String!
  content: String
  completed: Boolean
  date: String
  endDate: String
  notificationId: String
  type: TaskType
  client: Client @belongsTo(fields: ["clientId"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

enum TaskType {
  Task
  Meeting
  Reminder
}

type Note @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) {
  id: ID!
  title: String
  content: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }, { allow: public, provider: apiKey, operations: [create, update]}])
}

type Deal @model @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey, operations: [create] }]) { 
  id: ID!
  title: String
  amount: String
  stage: String
  clientId: ID @index(name: "byDeal")
  client: Client @belongsTo(fields: ["clientId"])
}

type Mutation {
  batchCreateClients(data: AWSJSON, mappedFields: [String]): String
    @function(name: "batchcreateclients-dev")
  deleteUserData: Boolean! @function(name: "deleteUserData-dev")
}